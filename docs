to run:uvicorn <module_name>:<app_instance> --reload

**what is session synchronization**
Session synchronization in the context of FastAPI and databases typically refers to managing and ensuring that database sessions are correctly created, used, and closed in a multi-threaded or asynchronous environment. Since databases often require sessions to maintain state and handle transactions, synchronization ensures that these sessions are handled properly during the request lifecycle


**Understanding synchronize_session in SQLAlchemy**
When bulk operations are performed, SQLAlchemy does not automatically know which objects in the in-memory session are affected by the database changes. synchronize_session provides a way to handle this

**values for synchronize_session**
1. **False**: No session synchronization is performed. SQLAlchemy does not attempt to update or remove in-memory objects.
eg.
```python
db.query(models.Blog).filter(models.Blog.published == False).delete(synchronize_session=False)
db.commit()
```


2. **evaluate**:SQLAlchemy evaluates the query expression in Python against the objects currently loaded in the session. It uses the expression to determine which in-memory objects are affected and updates or removes them as necessary.
eg.
```python
db.query(models.Blog).filter(models.Blog.published == False).delete(synchronize_session='evaluate')
db.commit()
```


3. **fetch** (Default): SQLAlchemy queries the database to fetch the affected rows, then updates or removes the corresponding objects in the session.
eg.
```python
db.query(models.Blog).filter(models.Blog.published == False).delete(synchronize_session='fetch')
db.commit()
```
